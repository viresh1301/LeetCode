/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
       /* TreeNode* pre = NULL;
        stack<TreeNode*>st;
        while(root || !st.empty())
        {
            while(root)
            {
                st.push(root);
                root = root->left;
            }
            root = st.top();
            st.pop();
            if(pre!=NULL && root->val <= pre->val) return false;
            pre = root;
            root = root->right;
        }
        return true;*/
        TreeNode* pre = NULL;
        return checkvalid(root,pre);
        //if(root==NULL) return 0;
        //TreeNode* prev = NULL;
        //if(root->left)
    }
    //vector<int>v;
      bool checkvalid(TreeNode*root,TreeNode* &pre){
        if(root==0) return true;
        if(checkvalid(root->left,pre)==0) return false;
        if(pre!=NULL && root->val <= pre->val) return false;
        pre = root;
        return checkvalid(root->right,pre);
    }
   /* bool inorder(TreeNode*root){
        if(root==0) return true;
        inorder(root->left);
        v.push_back(root->val);
        inorder(root->right);
        for(int i=0;i<v.size()-1;i++)
        {
            if(v[i]>=v[i+1]) return false;
        }
        return true;
     }*/
};
